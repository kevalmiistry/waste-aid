generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Post {
    uuid            String       @id @default(uuid())
    title           String
    description     String
    address         String
    hasTarget       Boolean      @default(false)
    targetAmount    Int?
    collectedAmount Int?
    amountType      String?
    hasDeadline     Boolean      @default(false)
    startDate       DateTime?
    endDate         DateTime?
    createdAt       DateTime     @default(now())
    updatedAt       DateTime     @updatedAt
    aidman          Account      @relation(fields: [am_id], references: [id], onDelete: Cascade)
    am_id           String
    PostImages      PostImages[]
    donations       Donations[]
    metaData        Json?
    status          Boolean      @default(true)
}

model PostImages {
    uuid     String @id @default(uuid())
    imageURL String
    post     Post   @relation(fields: [post_id], references: [uuid], onDelete: Cascade)
    post_id  String
}

model Donations {
    uuid         String    @id @default(uuid())
    post         Post      @relation(fields: [post_id], references: [uuid])
    post_id      String
    donator      Account   @relation(fields: [donator_id], references: [id], onDelete: Cascade)
    donator_id   String
    donatedAmout Int?
    reached      Boolean   @default(false)
    createdAt    DateTime  @default(now())
    reachedDate  DateTime?
}

// Necessary for Next auth
model Account {
    id                String      @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?     @db.Text
    access_token      String?     @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?     @db.Text
    session_state     String?
    user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    Post              Post[]
    donations         Donations[]

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
